generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Banner {
  id          Int               @id @default(autoincrement())
  tenantId    Int
  image       String

  tenant   Tenant   @relation(fields: [tenantId], references: [id])

  @@map("banners")
}

model Tenant {
  id             Int               @id @default(autoincrement())
  slug           String            @unique
  logo           String
  storeImg       String?
  open           String
  address        String
  close          String
  minimumTime    Int?
  maximumTime    Int?
  status         String
  name           String
  mainColor      String
  email          String            @unique
  password       String 
  contact        String
  cnpj           String            @unique
  gnClientId     String?
  gnClientSecret String?
  gnCertificado  String?
  chavePix       String?
  myuser            Int?
  banners        Banner[]
  products       Product[]
  neighborhoods  Neighborhood[]
  orders         Order[]
  orderstable    OrderTable[]
  tenantuser     TenantUser[]

  @@map("tenants")
}

model TenantUser {
  id             Int               @id @default(autoincrement())
  tenantId       Int
  level          Int
  position       String
  name           String            
  email 		     String            @unique
  password 	     String            @unique

  tenant   Tenant   @relation(fields: [tenantId], references: [id])

  @@map("tenantusers")
}

model Product {
  id                Int            @id @default(autoincrement())
  tenantId          Int
  categoryId        Int
  categoryName      String
  name              String
  image             String
  price1            Float
  price2            Float?
  price3            Float?
  price4            Float?
  oldprice1         Float?
  oldprice2         Float?
  oldprice3         Float?
  oldprice4         Float?
  sizeName1         String
  sizeName2         String?
  sizeName3         String?
  sizeName4         String?
  description       String?
  disposition       String?
  productOrder      ProductOrder[]
  productOrderTable ProductOrderTable[]

  tenant   Tenant   @relation(fields: [tenantId], references: [id])
  category Category @relation(fields: [categoryId], references: [id])

  @@map("products")
}

model ProductStock {
  id              Int            @id @default(autoincrement())
  tenantId        Int
  name            String         @unique
  cod             String?
  measure         String
  quantity        Int
  validity        String
  minimumQuantity Int?

  @@map("productsstock")
}

model Additional {
  id              Int            @id @default(autoincrement())
  tenantId        Int
  categoryId      Int
  categoryName    String
  type            String
  itens           String
  price1          Int
  price2          Int?
  price3          Int?
  price4          Int?
  unique          String?

  category  Category  @relation(fields: [categoryId], references: [id])

  @@map("additionals")
}

model Category {
  id            Int            @id @default(autoincrement())
  tenantId      Int
  name          String
  flavorsSize1  Int?
  flavorsSize2  Int?
  flavorsSize3  Int?
  flavorsSize4  Int?
  similar       String?
  products      Product[]
  additonal     Additional[]

  @@map("categories")
}

model User {
  id              Int            @id @default(autoincrement())
  name            String
  cpf             String         @unique
  contact         String
  email           String         @unique
  password        String
  shippingAddress ShippingAddress[]
  order           Order[]

  @@map("users")
}

model ShippingAddress {
  id             Int             @id @default(autoincrement())
  userId         Int
  street         String
  number         String?
  cep            String?
  neighborhoodId Int
  neighborhoodName String
  city           String
  state          String
  complement     String?
  order          Order[]

  user    User   @relation(fields: [userId], references: [id])
  neighbor  Neighborhood  @relation(fields: [neighborhoodId], references: [id])


  @@map("shippingaddresses")
}

model Neighborhood {
  id                Int             @id @default(autoincrement())
  tenantId          Int
  name              String
  price             Float
  shippingAddress   ShippingAddress[]

  tenant   Tenant   @relation(fields: [tenantId], references: [id])

  @@map("neighborhoods")
}

model Order {
  id                  Int             @id @default(autoincrement())
  userId              Int
  tenantId            Int
  addressId           Int
  remove              String?
  pdv                 String?
  paymentType         String 
  paymentChange       Float?
  shippingPrice       Float?
  subtotal            Float
  orderDate           String
  status              String
  total               Float
  observation         String?
  cupom               String?
  cupomDiscount       Int?
  canceledObservation String?
  maximumTime         String?
  pdvClientName       String?
  pdvClientContact    String?
  pdvClientCpf        String?
  motoboy             Int?
  productOrder        ProductOrder[]

  tenant   Tenant   @relation(fields: [tenantId], references: [id])
  user  User   @relation(fields: [userId], references: [id])
  shippingAddress  ShippingAddress   @relation(fields: [addressId], references: [id])

  @@map("orders")
}

model ProductOrder {
  id                Int     @id @default(autoincrement())
  orderId           Int
  productId         Int
  productName       String
  productPrice      Float
  productSize       String
  otherProductId    Int?
  otherProductName  String?
  otherProductId2   Int?
  otherProductName2 String?
  otherProductId3   Int?
  otherProductName3 String?
  additionalId      Int?
  additionalName    String?
  additionalId2      Int?
  additionalName2    String?
  additionalId3      Int?
  additionalName3    String?
  additionalId4      Int?
  additionalName4    String?
  additionalId5      Int?
  additionalName5    String?
  additionalId6      Int?
  additionalName6    String?
  additionalId7      Int?
  additionalName7    String?
  additionalId8      Int?
  additionalName8    String?
  additionalId9      Int?
  additionalName9    String?
  additionalId10      Int?
  additionalName10    String?
  quantity          Int
  category          String? 
  comboId           Int?
  comboAdditionals1_1 Int?
  comboAdditionals1_2 Int?
  comboAdditionals1_3 Int?
  comboAdditionals1_4 Int?
  comboAdditionals1_5 Int?
  comboAdditionals1_6 Int?
  comboAdditionals1_7 Int?
  comboAdditionals1_8 Int?
  comboAdditionals1_9 Int?
  comboAdditionals1_10 Int?
  comboAdditionals2_1 Int?
  comboAdditionals2_2 Int?
  comboAdditionals2_3 Int?
  comboAdditionals2_4 Int?
  comboAdditionals2_5 Int?
  comboAdditionals2_6 Int?
  comboAdditionals2_7 Int?
  comboAdditionals2_8 Int?
  comboAdditionals2_9 Int?
  comboAdditionals2_10 Int?
  comboAdditionals3_1 Int?
  comboAdditionals3_2 Int?
  comboAdditionals3_3 Int?
  comboAdditionals3_4 Int?
  comboAdditionals3_5 Int?
  comboAdditionals3_6 Int?
  comboAdditionals3_7 Int?
  comboAdditionals3_8 Int?
  comboAdditionals3_9 Int?
  comboAdditionals3_10 Int?
  comboAdditionals4_1 Int?
  comboAdditionals4_2 Int?
  comboAdditionals4_3 Int?
  comboAdditionals4_4 Int?
  comboAdditionals4_5 Int?
  comboAdditionals4_6 Int?
  comboAdditionals4_7 Int?
  comboAdditionals4_8 Int?
  comboAdditionals4_9 Int?
  comboAdditionals4_10 Int?
  comboAdditionals5_1 Int?
  comboAdditionals5_2 Int?
  comboAdditionals5_3 Int?
  comboAdditionals5_4 Int?
  comboAdditionals5_5 Int?
  comboAdditionals5_6 Int?
  comboAdditionals5_7 Int?
  comboAdditionals5_8 Int?
  comboAdditionals5_9 Int?
  comboAdditionals5_10 Int?

  product Product @relation(fields: [productId], references: [id])
  order   Order   @relation(fields: [orderId], references: [id])

  @@map("productorders")
}

model OrderTable {
  id            Int             @id @default(autoincrement())
  tenantId      Int
  table         Int
  paymentType   String
  paymentChange Float?
  subtotal      Float
  orderDate     String
  status        String
  total         Float
  observation   String?
  cupom         String?
  cupomDiscount Int?
  canceledObservation String?
  productOrderTable  ProductOrderTable[]

  tenant   Tenant   @relation(fields: [tenantId], references: [id])

  @@map("orderstable")
}

model ProductOrderTable {
  id                Int     @id @default(autoincrement())
  orderId           Int
  productId         Int
  productName       String
  productPrice      Float
  productSize       String
  otherProductId    Int?
  otherProductName  String?
  otherProductId2   Int?
  otherProductName2 String?
  otherProductId3   Int?
  otherProductName3 String?
  additionalId      Int?
  additionalName    String?
  additionalId2      Int?
  additionalName2    String?
  additionalId3      Int?
  additionalName3    String?
  additionalId4      Int?
  additionalName4    String?
  additionalId5      Int?
  additionalName5    String?
  additionalId6      Int?
  additionalName6    String?
  additionalId7      Int?
  additionalName7    String?
  additionalId8      Int?
  additionalName8    String?
  additionalId9      Int?
  additionalName9    String?
  additionalId10      Int?
  additionalName10    String?
  quantity          Int
  category          String?

  product Product @relation(fields: [productId], references: [id])
  orderTable   OrderTable   @relation(fields: [orderId], references: [id])

  @@map("productorderstable")
}

model Cupom {
  id                Int     @id @default(autoincrement()) 
  tenantId          Int
  name              String  @unique
  price             Float
  quantityTotal     Int?
  quantityUsefull   Int?
  initialDate       String?
  finalDate			    String?
 
  @@map("cupoms")
}

model Combo {
  id                 Int     @id @default(autoincrement()) 
  tenantId           Int
  name               String  @unique
  price              Float
  image              String
  description        String
  disposition        String?
  categoryId         Int?
  categoryName       String?
  quantityProducts   Int
  selectedProducts1  String
  selectedProducts2  String
  selectedProducts3  String?
  selectedProducts4  String?
  selectedProducts5  String?
  sizeProducts1      String
  sizeProducts2      String
  sizeProducts3      String?
  sizeProducts4      String?
  sizeProducts5      String?
  flavorsProduct1    Int?
  flavorsProduct2    Int?
  flavorsProduct3    Int?
  flavorsProduct4    Int?
  flavorsProduct5    Int?
  additional1        String?
  additional2        String?
  additional3        String?
  additional4        String?
  additional5        String?

  @@map("combos")
}